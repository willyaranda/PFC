<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Tener tests unitarios y funcionales</title><link rel="stylesheet" type="text/css" href="docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.77.1"/><link rel="prev" href="ch07s02.xhtml" title="Investigar nuevas tecnologías"/><link rel="next" href="ch07s04.xhtml" title="Priorización y enfoque en tareas"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">Tener tests unitarios y funcionales</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch07s02.xhtml">Anterior</a> </td><th style="width: 60%; text-align: center; ">Capítulo 7. Lecciones aprendidas</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch07s04.xhtml">Siguiente</a></td></tr></table><hr/></div></header><section class="section" id="idp767200"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Tener tests unitarios y funcionales</h2></div></div></div><p>
      Crear test y pruebas es algo que debería estar obligado en todos los proyectos, pero que, por unas cuestiones u otras, no lo suele estar, y se suele llevar a un plano secundario, muchas veces con la documentación. Sin embargo, es una de las piezas fundamentales en un sistema que esté en desarrollo. Dada la naturaleza de la informática, quizás cambios que se piensen que no afectan a otras partes, sí lo podrían hacer, y ahí es donde entran los tests.
    </p><p>
      Así pues, es fácil pensar en tener tests para prácticamente la totalidad del código y de las funciones que se van usando durante el programa. Simplemente es elegir la tecnología más fácil y sencilla para que dichos tests se ejecuten y que crearlos no sea algo que lleve más tiempo que el propio código que se quiere probar.
    </p><p>
      Así pues, en el caso del servidor de notificaciones, se ha empleado Node.js como lenguaje para crear los tests, tanto unitarios como funcionales, apoyándose en algunos casos de módulos específicamente diseñados para ello, como Vows, que permite ejecutar tests en paralelo, esperar a que unos terminen antes de que empiecen otros, y que se haga de forma muy sencilla y muy visual. Todo ello totalmente integrado en el fichero <code class="filename">Makefile</code> para ser ejecutado como <code class="code">make tests</code> hace que la ejecución y comprobación de funcionalidades y de regresiones sea rápida y sencilla.
    </p></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch07s02.xhtml">Anterior</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch07.xhtml">Subir</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch07s04.xhtml">Siguiente</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">Investigar nuevas tecnologías </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="index.xhtml">Inicio</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> Priorización y enfoque en tareas</td></tr></table></div></footer></body></html>

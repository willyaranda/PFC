<?xml version="1.0" encoding="utf-8"?>
<section xml:id="state_art_Internet_thialfi"
      xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      version="5.0" xml:lang="es">

  <title xml:id="state_art_Internet_thialfi_title">Thialfi: el futuro de Google</title>
  <para>
    Thialfi es un nuevo protocolo diseñado y publicado por Google<footnote><para>http://research.google.com/pubs/pub37474.html</para></footnote> que trata de arreglar algunos de los problemas de los sistemas de notificaciones: el paso de mensajes completos a través de la red y el consiguiente inconveniente de infraestructura y escalabilidad que podría resultar de tener millones de terminales conectados a la vez mandando muchos mensajes a través de la red y en espera para ser entregados.
  </para>
  <note>
    <para>
      Sin embargo, cabe observar que este sistema no está funcionando en los terminales móviles que llevan Android, sino que se usa el ya explicado GCM, sólo con la intención de explorar nuevas posibilidades, así como la sincronización de contactos de manera experimental. Lo implementa Google Chrome en su versión de escritorio y móvil.
    </para>
  </note>
  <para>
    El principal cambio entre GCM y Thialfi es la vuelta de mensajes que no llevan contenido útil para la aplicación, si no que se basan en mandar números de versión sobre temas en concreto ("topics") a los que el usuario y las aplicaciones se suscriben para mantenerse en sincronía.
  </para>
  <formalpara>
    <title>Características</title>
    <para>
      Por consiguiente, Thialfi guarda una serie de mejoras con respecto a los otros sistemas:
    </para>
  </formalpara>
  <itemizedlist>
    <listitem>
      <formalpara>
        <title>Escalable</title>
        <para>
          Puede tener constancia de millones de clientes y de objetos, ya que el tamaño para ambos es pequeño, sin necesidad de guardar datos finales, si no simplemente números de versión.
        </para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>Rápido</title>
        <para>
          Según las pruebas y el paper original, la entrega de los mensajes, en este caso mensajes con números de versión, se realiza en menos de 1 segundo desde que el servidor de terceros manda un mensaje hasta que el cliente lo recibe.
        </para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>Seguro</title>
        <para>
          Incluso si un centro de datos se cae, el sistema es capaz de recuperarse, volviendo a registrar los diferentes dispositivos y eventualmente regresando a un estado correcto.
        </para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>Fácil de usar</title>
        <para>
          Las APIs son sencillas y han sido implementadas en diferentes servicios utilizados por Google, como la sincronización de datos de Chrome, contactos y en Google+.
        </para>
      </formalpara>
    </listitem>
  </itemizedlist>
  <para>
    Entonces, tal y como se ha expuesto en los puntos anteriores, todo son objetos que poseen identificadores (<code>ID</code>) únicos y números de versión que incrementan de forma monótona en cada actualización.
  </para>
  <formalpara>
    <title>Ventajas</title>
    <para>
    </para>
  </formalpara>
  <itemizedlist>
    <listitem>
      <formalpara>
        <title>Menos datos guardados</title>
        <para>
          Es una de las ventajas, pero a la vez es un gran inconveniente. Sólo hay que guardar los objetos que contienen un identificador y un número de versión, por lo que las bases de datos (BigTable, que usan en Google) necesitan menos espacio para poder funcionar, al no guardar mensajes (en GCM el <code>payload</code> máximo es de 4KiB). Además, sólo es necesario guardar el último mensaje para cada aplicación-objeto (básicamente es aumentar el número de versión), mientras que en un sistema como GCM se requiere guardar múltiples mensajes.
        </para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>No hay fugas de datos privados</title>
        <para>
          Dado que las notificaciones no tienen mensaje, no hay riesgo de fuga de datos privados, puesto que lo único que se transmite son números de versión, que no dicen nada sobre el contenido.
        </para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>Entrega siempre actualizada</title>
        <para>
          La entrega de los mensajes está asegurada, no porque siempre se tenga la última versión en un momento determinado, si no porque seguro que se va a conocer esa versión en un momento futuro. Esto quiere decir que lo único que reciben los clientes es un número de versión de un determinado objeto, que siempre es el máximo posible. Así pues, si un cliente se ha quedado desactualizado en, por ejemplo, la versión <code>17</code>, y ha llegado la <code>18</code> y no ha podido ser entregada, cuando llegue la versión <code>19</code> el cliente sabrá que tiene que pedir tanto la <code>18</code> como la <code>19</code>, para así estar en sincronía con el servidor, de manera que en cualquier momento lo único que almacena un servidor o un cliente es un determinado objeto, con un <code>ID</code> en una versión <code>V</code> determinada.
        </para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>Buena recuperación ante errores</title>
        <para>
          Thialfi tiene una serie de mensajes de control que permiten recuperar el estado de los registros en caso de fallo. Por ejemplo, si el servidor pierde todos los registros, se envía un mensaje a los clientes para que ejecuten <code>ReissueRegistrations()</code>, y se inicia un protocolo para devolver los registros.
        </para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>Fácil implementación del cliente</title>
        <para>
          El número de líneas requeridas para la implementación en el cliente es muy bajo, debido a su uso basado en eventos y su fácil lógica, en la siguiente figura se pueden ver algunos ejemplos:
        </para>
      </formalpara>
      <figure>
        <title>Líneas de código para implementar Thialfi</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../resources/thialfi-sloc.png" align="left" width="13cm"  />
          </imageobject>
        </mediaobject>
      </figure>
      <para>
        Como se puede observar, varía dependiendo del lenguaje de programación, desde las 40 u 80 en Google Contacts y Google+ hasta las 535 bajo un protocolo XMPP en Chrome Sync.
      </para>
      <para>
        Además, lo interesante que se ve en esta figura anterior es que Thialfi no obliga un único protocolo de aplicación, si no que puede funcionar sobre varios, como conexiones HTTP, XMPP o incluso RPC.
      </para>
    </listitem>
  </itemizedlist>
  <formalpara>
    <title>Problemas</title>
    <para>
      Sin embargo, aunque aporta muchas ventajas, como las que están enumeradas anteriormente, cuenta con problemas de cara a ser un buen servidor para datos en la red móvil
    </para>
  </formalpara>
  <itemizedlist>
    <listitem>
      <formalpara>
        <title>Doble conexión para recuperar datos</title>
        <para>
          En un sistema en el que los servicios de terceros pueden enviar datos de payload, obliga a que el servidor de notificaciones sea más complejo, por el hecho de guardar datos. Sin embargo, esto puede significar que los clientes no tengan que abrir una segunda conexión para recuperar los datos necesarios debido a que el propio mensaje de notificación ya lo tiene. Esto, a pesar de parecer un problema menor, constituye uno de los grandes inconvenientes en las redes móviles, donde realizar una conexión es una operación muy costosa (en términos de tiempo y de señalización) y la descarga de los datos es lenta.
        </para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>Mayor complejidad en el servidor</title>
        <para>
          Esto se debe a que requiere guardar los cambios o diferencias para que cuando se conecten los diferentes clientes, puedan recuperar los datos que pidan, como por ejemplo, los datos de la versión <code>17</code>. Sin embargo, puede haber casos en los que los clientes no vayan a pedir la última versión, si no la versión <code>16</code> y <code>17</code>. Por lo que el servidor debe mantener esas diferencias de algún modo (en formato delta o con mensajes completos).
        </para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>Mayor complejidad en las aplicaciones</title>
        <para>
          Esto es debido a que las aplicaciones no van a procesar el mensaje directamente, si no que tienen que discernir cuál es el número de versión, hacer una llamada al servidor de terceros y recibir los datos. Además, se ha de tener en cuenta que pueden solicitarse diferentes versiones para acabar en sincronía con el servidor, lo que aumenta la lógica para ver qué versión está dando el servidor y cómo se puede manejar con versiones más nuevas.
        </para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>Servidores de aplicación más potentes</title>
        <para>
          El primer problema es la necesidad de que todos los clientes, una vez recibido un número de versión, tengan que conectarse obligatoriamente con el servidor de la aplicación para descargar los datos, lo que podría conllevar muchísima capacidad de cálculo (si por ejemplo los datos hay que calcularlos al vuelo y dependen de cada petición) y de ancho de banda, así como de medidas para evitar que muchos usuarios se conecten a la vez y puedan colapsar los sistemas.
        </para>
      </formalpara>
    </listitem>
  </itemizedlist>
  <para>
    En definitiva, Thialfi puede considerarse como un posible candidato a complementar y no a sustituir a GCM, por las desventajas ya explicadas. La necesidad de crear una segunda conexión y los posibles problemas que puede acarrear a los servidores de aplicación trabajar con millones de peticiones, hace que no sea escalable para pequeñas empresas y malo para dispositivos móviles. Sin embargo, en la práctica se ha demostrado que es competente, aunque con grandes granjas de servidores como los centros de datos de Google.
  </para>
</section>

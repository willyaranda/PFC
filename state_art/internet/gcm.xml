<?xml version="1.0" encoding="utf-8"?>
<section xml:id="state_art_Internet_gcm"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0" xml:lang="es">

  <title xml:id="state_art_Internet_gcm_title">GCM: Google Could Messaging</title>
  <para>
    GCM o Google Cloud Messaging<footnote><para>http://developer.android.com/google/gcm/index.html</para></footnote> es un sistema de notificaciones push creado por la empresa Google para su sistema operativo Android. Su finalidad es la misma que los demás sistemas: entregar notificaciones o mensajes que un servicio de terceros (o incluso la misma plataforma de Google) a los usuarios usando un dispositivo de una manera fácil, ordenada y controlada.
  </para>
  <para>
    Lanzado en julio de 2012, es uno de los sistemas más grandes, puesto que está presente en todos los dispositivos Android que tengan una cuenta de Google asociada, los cuales son prácticamente la mayoría. El número de usuarios de este servicio no es especificado por Google, pero podría ser similar o inferior al número de dispositivos Android en el mercado, que supera los 500 millones de dispositivos<footnote><para>A fecha de 12 de septiembre de 2012, http://news.cnet.com/8301-1035_3-57510994-94/google-500-million-android-devices-activated/</para></footnote>.
  </para>
  <blockquote>
    <attribution>GCM: Google Cloud Messaging for Android</attribution>
    <para>
      Google Cloud Messaging for Android (GCM) es un servicio que te permite enviar datos desde tu servidor a los usuarios con dispositivos Android. Esto puede ser un pequeño mensaje que dice a la aplicación que hay nuevos datos para ser descargados desde el servidor (por ejemplo, que un amigo ha subido un nuevo vídeo) o un mensaje que puede contener hasta 4KiB de información (por lo que las aplicaciones como las de mensajería instantánea pueden consumirlo directamente).
    </para>
    <para>
      El servicio GCM maneja todos los aspectos del encolamiento de los mensajes y entrega a la aplicación Android determinada que se puede ejecutar en el dispositivo.
    </para>
  </blockquote>
  <formalpara>
    <title>Características</title>
    <para>GCM tiene como características más interesantes:
    <itemizedlist>
      <listitem>
        <para>
          La aplicación a la que tiene que llegar la notificación no tiene por qué estar abierta. El servicio GCM se encarga de despertarla y que maneje la notificación.
        </para>
      </listitem>
      <listitem>
        <para>
          No hay ninguna interfaz para administrar la notificacición. GCM simplementa pasa datos en crudo desde que la notificación es recibida hasta que es entregada. La aplicación final es la que tiene la lógica necesaria para saber qué hacer con la notificación en todo momento. Por ejemplo, puede que la notificación sea "hay nuevos datos para descargar", por lo que no muestre ninguna interfaz, o bien un nuevo mensaje de un amigo, que sí es importante mostrar.
        </para>
      </listitem>
      <listitem>
        <para>
          Requiere que la versión de Android instalada sea la 2.2 y además tiene que tener la aplicación de Google Play (el antiguo Market) configurada correctamente, esto es, con una cuenta de Google asociada. Pero no obliga a que la aplicación que reciba la notificación esté instalada por Google Play, si no que puede tener cualquier origen.
        </para>
      </listitem>
      <listitem>
        <para>
          Usa una conexión permanente con los servidores de Google para recibir las notificaciones y mensajes de control.
        </para>
      </listitem>
      <listitem>
        <para>
          Requiere que los servidores de terceros que envíen notificaciones estén registrados en la plataforma. Esto significa que Google puede revocar en cualquier momento el envío de notificaciones por parte de un desarrollador o empresa, simplemente no permitiendo el identificador único que se les proporciona en un primer momento.
        </para>
      </listitem>
      <listitem>
        <para>
          La identificación de la aplicación es de forma única. Esto significa que para cada aplicación que quiera recibir notificaciones push, en cada dispositivo, tiene un número único que la identifica de forma única dentro del servicio. Esta identificación única la da el servidor de GCM a la aplicación, que a su vez la tiene que enviar al servidor de terceros para que se envíe concretamente a esa instancia.
        </para>
      </listitem>
    </itemizedlist>
    </para>
  </formalpara>
  <para>
    Así pues, el diagrama principal del envío y entrega de un mensaje de una forma muy abstracta es:
  </para>
    <note>
      <para>Se supone que la aplicación instalada tiene un ID de registro que permite recibir notificaciones, además de que el servidor de terceros ha guardado ese ID y que el servidor tiene una clave de API que le permite identificarse como emisor de notificaciones.</para>
    </note>

  <orderedlist>
    <listitem>
      <para>El servidor de aplicación envía un mensaje a los servidores de GCM.</para>
    </listitem>
    <listitem>
      <para>El servicio GCM encola el mensaje y lo guarda en el caso de que el dispositivo al que se tiene que entregar esté desconectado.</para>
    </listitem>
    <listitem>
      <para>Cuando el dispositivo se encuentre online (puede que ya lo esté, o puede que no), el mensaje es mandado por un canal al dispositivo, que lo parsea el sistema operativo (Android, en este caso), y despierta a la aplicación destino en el caso que esté cerrada o la entrega directamente.</para>
    </listitem>
    <listitem>
      <para>La aplicación procesa el mensaje y realiza cualquier tipo de evento relacionado con ella: sincronizar datos de fondo, mostrar una alerta…</para>
    </listitem>
  </orderedlist>
  <para>
    GCM es un sistema que no es obligatorio para las aplicaciones Android publicadas en el Market de Google, sin embargo, su diseño hace que sea bastante eficiente para las redes móviles y haya un buen puñado de ventajas que hacen que los servicios de terceros tengan que tener menos lógica y preocuparse menos de la suerte que van a correr sus mensajes.
  </para>
  <note>
    Cabe señalar, que antes de la introducción de GCM para los desarrolladores de Android (en julio de 2012), antes había un sistema muy similar para teléfonos Android, llamado Cloud to Device Messagging, o más conocido como C2DM<footnote><para>https://developers.google.com/android/c2dm/</para></footnote>
  </note>
  <formalpara>
    <title>Ventajas</title>
    <para>
      GCM tiene una serie de ventajas sobre su predecesor CD2M (no explicado puesto que ha sido sustituido por esta versión) de las cuales habría que destacar:
    </para>
  </formalpara>
    <itemizedlist>
      <listitem>
        <para>
          Tiene un mejor uso de batería, ya que puede encolar mensajes para ser entregados cuando el dispositivo está con una conexión activa (y por lo tanto tiene la radio móvil activada). Además, no tiene por qué notificar al dispositivo siempre que le llegue una nueva notificación, si no que puede esperar a que pase a estar activo (por ejemplo, que se encienda la pantalla) para mandar los datos.
        </para>
      </listitem>
      <listitem>
        <para>
          El uso de datos y la transferencia es más eficiente, por las explicaciones del punto anterior. Esto hace que se gaste menos batería y que el usuario sólo pueda recibir notificaciones cuando realmente son interesantes: cuando se usa el dispositivo, y mantener en cola las no prioritarias.
        </para>
      </listitem>
      <listitem>
        <para>
          El API es más sencilla, puesto que hay menos pasos para poder usar el servicio y además, el código del cliente en las aplicaciones es más claro y fácil de implementar, sobrescribiendo algunos métodos de las clases de las cuales se extiende.
        </para>
      </listitem>
      <listitem>
        <para>
          La migración del servicio es muy simple, y sólo hay que cambiar la URL de push para que apunte hacia otro servidor.
        </para>
      </listitem>
      <listitem>
        <para>
          Se eliminan las cuotas que había en el sistema anterior, permitiendo a los desarrolladores crecer de forma sencilla y sin nuevas peticiones. Además, se pueden consultar el estado de los mensajes en el perfil de Google.
        </para>
      </listitem>
      <listitem>
        <para>
          Permiten un mensaje (<code>payload</code>) de 4KiB, por lo que muchos de los datos que puedan ir por esta mensajería push no requerirán que las aplicaciones se conecten al servidor de terceros para recoger la información y realizar una segunda conexión.
        </para>
      </listitem>
      <listitem>
        <para>
          Se permiten hacer mensajes multicast, esto quiere decir que se puede hacer sólo un envío de mensaje push, pero indicando todos los receptores en el momento de enviarlo, se entregarán a todos. Incluso múltiples emisores pueden enviar mensajes a una misma aplicación (por ejemplo, una red social que habla sobre un jugador de fútbol y a la vez información sobre el equipo en el que juega).
        </para>
      </listitem>
      <listitem>
        <para>
          Hay un tiempo de vida máximo de 4 semanas para cada mensaje. Si un mensaje viene sin tiempo de vida, se presupone que el tiempo es máximo, sin embargo, un mensaje muy interesante es del de un TTL (<code>time_to_live</code>) de 0 segundos, el cual se envía a los receptores sin guardarlo, por lo que si no está conectacto el receptor (o los receptores), se pierde.
        </para>
      </listitem>
      <listitem>
        <para>
          Existe la posibilidad de sobrescribir mensajes antiguos (con la misma <code>collapse_key</code>), enviar mensajes sólo cuando el usuario esté activo (con <code>delay_while_idle</code>) e incluso comprobar si los mensajes van a ser entregados o no dependiendo de la respuesta que de el servicio.
        </para>
      </listitem>
    </itemizedlist>
  <para>
    A pesar de la enorme capacidad que tiene este sistema, con todas sus ventajas que se han mostrado anteriormente, sigue teniendo pequeños fallos que hacen que no sea ampliamente usado, por ejemplo:
    <orderedlist>
      <listitem>
        <formalpara>
          <title>No es obligatorio</title>
          <para>
            Por lo que los diferentes desarrolladores no están obligados a usarlo en sus aplicaciones y pueden crear otros sistemas de push propietarios (como los que hacen la mayoría de aplicaciones de mensajería instantánea), lo que lleva a que la validez del sistema sea menor.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Mantiene una conexión abierta</title>
          <para>
            Como se ha comentado, uno de los grandes problemas, junto a la señalización, es la de mantener canales abiertos sin hacer nada en espera de que alguna vez atraviese un dato, en nuestro caso notificaciones. 
          </para>
        </formalpara>
      </listitem>
    </orderedlist>
  </para>
  <figure>
    <title>Funcionamiento de GCM</title>
    <mediaobject><imageobject><imagedata fileref="../../resources/apns-gcm.png" align="left" width="17cm"  /></imageobject></mediaobject>
  </figure>
  <formalpara>
    <title>Arquitectura</title>
    <para>
      Así pues, se puede observar el flujo completo de trabajo de GCM:
    </para>
  </formalpara>
    <orderedlist>
      <listitem>
        <para>
          En la primera utilización del servicio, el teléfono dotado con Android (la única plataforma que soporta GCM por el momento) tiene que disponer de una cuenta de correo válida en el sistema (de GMail o de Google Apps), a la cual se asociará un identificador único de dispositivo. Además, también se enviará una petición para recibir una cadena única que identificará a una aplicación en un dispositivo en concreto.
        </para>
      </listitem>
      <listitem>
        <para>
          La aplicación que pidió la identificación, la recibe del servidor GCM.
        </para>
      </listitem>
      <listitem>
        <para>
          La aplicación manda, por su propio canal de comunicación que haya decidido, dicho token único a un servidor de terceros, con algún tipo de identificación de usuario o de instancia que permitirá enviar contenido personalizado. Por ejemplo, si una persona registrada desea recibir notificaciones sólo sobre su equipo favorito, se tiene que enviar el dato que identifique a esa persona/usuario con el identificador enviado.
        </para>
      </listitem>
      <listitem>
        <para>
          El dispositivo abre y mantiene una conexión TCP persistente con el servidor de GCM, mandando mensajes de keep-alives (que viene a ser un "sigo vivo") en intervalos de tiempo determinados. Estos intervalos son, por defecto, de 28 minutos, pero varía dependiendo del país y de la operadora, e incluso de forma adaptativa.
        </para>
      </listitem>
      <listitem>
        <para>
          En cualquier momento, el servidor de terceros (llamado Application Server) manda un mensaje push al servidor GCM con los parámetros que se especifican en el servicio, incluyendo el identificador de dispositivo recibido en el paso 2 y enviado en el paso 3.
        </para>
      </listitem>
      <listitem>
        <para>
          GCM envía, en la medida de sus posibilidades, el mensaje al dispositivo a través del canal TCP abierto, ya sea de forma inmediata, o bien con los parámetros indicados en el paso anterior (como <code>delay_while_idle</code> o <code>time_to_live</code>).
        </para>
      </listitem>
    </orderedlist>
  <formalpara>
    <title>Problemas</title>
    <para>
      Sin embargo, a pesar de todas las nuevas características y todo lo que ha trabajado Google en este sistema, hay varios problemas que pueden ser bastante graves y que harían que no confiáramos en este sistema
    </para>
  </formalpara>
    <itemizedlist>
      <listitem>
        <para>
          Se necesita mantener siempre una conexión abierta, por lo que sigue ocupando espacio en la red móvil, y en concreto en el GGSN (GPRS Support Node), que es un hardware con un precio muy elevado que es donde se mantienen cada conexión abierta que tengamos, hasta un límite de 65535.
        </para>
      </listitem>
      <listitem>
        <para>
          Esa única conexión requiere de keep-alives para mantenerse activa, por lo que cada cierto tiempo se estará cambiando de estado radio, con su correspondiente señalización, para indicar simplemente que estamos conectados.
        </para>
      </listitem>
      <listitem>
        <para>
          Es un punto único de fallo (SPOF: Single Point Of Failure) son los servidores de Google, por lo que si caen, la infraestructura cae, y no hay posibilidad de cambiar a otra, puesto que el protocolo es cerrado y propietario.
        </para>
      </listitem>
      <listitem>
        <para>
          Todos los mensajes van por los servidores de Google, por lo que puede ser un posible riesgo de seguridad, más aún viendo las diferentes leyes para regular Internet que han salido desde los EE.UU, que es donde Google está radicada.
        </para>
      </listitem>
      <listitem>
        <para>
          No hay garantía sobre el orden de entrega de los mensajes, por lo que algunos de estos enviados posteriormente podrían llegar antes que uno enviado previamente. De esta forma, no se pueden crear dependencias entre mensajes.
        </para>
      </listitem>
    </itemizedlist>
</section>

<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="technologies"
      xmlns="http://docbook.org/ns/docbook"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      version="5.0" xml:lang="es">

  <title>Tecnologías</title>
  <para>
    Ahora, una vez hablado de cómo es la arquitectura y la primera implementación, hay que comentar sobre las tecnologías usadas y por qué se han escogido para la parse del servidor, comparando con otras soluciones similares.
  </para>
  <para>
    Así pues, una de las grandes decisiones que hay que tomar al iniciar un proyecto de software son las tecnologías y lenguajes de programación que se van a utilizar, incluyendo a las herramientas, editores, gestores de bugs y de incidencias, método de comentarios en el código y un sin fin de características que harán derivar el proyecto hacia el éxito o el fracaso.
  </para>

  <section>
    <title>Node.js</title>
    <para>
      Node.js<footnote><para>http://nodejs.org/</para></footnote> es un nuevo paradigma de programación para aplicaciones web en la parte del servidor, basado en JavaScript, muy rápido y con una serie de características muy importantes, como se verá más adelante.
    </para>
    <blockquote>
      <attribution>Node.js</attribution>
      <para>
        Node.js es una plataforma creada sobre el intérprete de JavaScript de Chrome para crear fácilmente aplicaciones de red rápidas y escalables. Node.js usa un sistema de eventos, un modelo de entrada-salida no bloqueante que hace que sea ligero y eficiente, perfecto para aplicaciones en tiempo real que requieran un uso intensivo de datos y que funcione a través de dispositivos distribuidos.
      </para>
    </blockquote>
    <para>
      Esta nueva plataforma surgió en el año 2009 por Ryan Dahl, y es patrocinada por la empresa Joyent, y su creación se debió a la necesidad de crear un sistema que pudiera trabajar correctamente con sitios web que aceptaran peticiones push para el intercambio de datos, por lo que la idea de esta tecnología era especialmente interesante para el proyecto del servidor de notificaciones.
    </para>
    <para>
      Está compuesta de diferentes paquetes independientes, que son:
    </para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>Motor JavaScript V8 de Google Chrome</title>
          <para>
            Un intérprete creado ad-hoc para Google Chrome, que revolucionó a la competencia por ser el más rápido y usar unas ideas muy novedosas e inteligentes. Genera código máquina para varias plataformas, como 32-bits, 64-bits, ARM o MIPS antes de ejecutar el código, en vez de directamente interpretarlo como hacían otros motores JavaScript. Además, utiliza una serie de técnicas antes de ejecutar que permiten optimizar (en varios pasos) y cachear resultados de partes del código que se usan mucho, como bucles o algunas funciones.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>La capa de abstracción libUV</title>
          <para>
            Node.js se basó en la librería <code>libev</code> de abstracción de plataforma que estaba solamente disponible para Linux. Una vez que el desarrollo continuó y fue necesario utilizar otras plataformas, como Windows, se decidió crear <code>libUV</code>, que no es más que la evolución de <code>libev</code> para soportar otras plataformas y dar un API estándar para los desarrolladores de forma transparente al sistema que lo está ejecutando.
          </para>
        </formalpara>
        <para>
          libUV contiene la mayoría de las características que luego definen a Node.js. Así pues, se implementan sockets TCP no bloqueantes, tuberías, el protocolo UDP, temporizadores, creación de procesos hijos e hilos, paso de mensajes vía IPC y sockets, varias funciones asíncronas como DNS o acceso a ficheros del disco…
        </para>
        <para>
            Así pues, livuv obliga a un estilo de programación asíncrono y basado en eventos, y su trabajo principal es el de proveer un bucle de eventos y notificaciones basadas en callbacks para operaciones de entrada y salida y otras actividades.
        </para>
      </listitem>
      <listitem>
        <formalpara>
          <title>Núcleo</title>
          <para>
            blahblah
          </para>
        </formalpara>
      </listitem>
    </itemizedlist>
    <para>
      Para su diseño se tomó ideas prestadas de otros sistemas similares, como es Twisted para Python, libevent para C o EventMachine par Ruby. La mayoría de los programas en JavaScript se ejecutan en el contexto del navegador, puesto que siempre han sido los mayores exponenentes y consumidores de este lenguaje, sin embargo, Node.js es ejecutado en la parte del servidor, e incluso puede ser usado como lenguaje de scripting (sustituyendo incluso a Bash o Python) y posee un REPL, una consola interactiva.
    </para>
    <formalpara>
      <title>Usuarios</title>
      <para>
        Actualmente Node.js, a pesar de ser una tecnología muy reciente y joven, está siendo usada por muchas grandes empresas de internet para escalar sus sistemas. El hecho de que Yahoo! haya empezado a migrar algunos de sus sistemas desde PHP hacia Node.js, implementando diferenes frameworks y módulos mientras hacían la transición, hace pensar que el recorrido de esta plataforma es muy amplio y con muchas empresas grandes detrás interesadas en que siga siendo funcional, agregue más módulos y características y que sea líder en el mercado de los desarrollos de servicios de backend. Además, Microsoft, LinkedIn (para su aplicación móvil) o incluso Walmart también han decidido cambiar algunos de sus sistemas para hacer uso de Node.js.
      </para>
    </formalpara>
  </section>

  <section>
    <title>RabbitMQ</title>
    <para>
      ....
    </para>
  </section>

  <section>
    <title>MongoDB</title>
    <para>
      ....
    </para>
  </section>

  <section>
    <title>Linux</title>
    <para>
      ....
    </para>
  </section>

</chapter>

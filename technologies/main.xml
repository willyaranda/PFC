<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="technologies"
      xmlns="http://docbook.org/ns/docbook"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      version="5.0" xml:lang="es">

  <title>Tecnologías</title>
  <para>
    Ahora, una vez se ha hablado de cómo es la arquitectura y la primera implementación, hay que comentar sobre las tecnologías usadas y por qué se han escogido para la parse del servidor, comparando con otras soluciones similares.
  </para>
  <para>
    Así pues, una de las grandes decisiones que hay que tomar al iniciar un proyecto de software son las tecnologías y lenguajes de programación que se van a utilizar, incluyendo a las herramientas, editores, gestores de bugs y de incidencias, método de comentarios en el código y un sin fin de características que harán derivar el proyecto hacia el éxito o el fracaso.
  </para>

  <section>
    <title>Node.js</title>
    <para>
      Node.js<footnote><para>http://nodejs.org/</para></footnote> es un nuevo paradigma de programación para aplicaciones web en la parte del servidor, basado en JavaScript, muy rápido y con una serie de características muy importantes, como se verá más adelante.
    </para>
    <blockquote>
      <attribution>Node.js</attribution>
      <para>
        Node.js es una plataforma creada sobre el intérprete de JavaScript de Chrome para crear fácilmente aplicaciones de red rápidas y escalables. Node.js usa un sistema de eventos, un modelo de entrada-salida no bloqueante que hace que sea ligero y eficiente, perfecto para aplicaciones en tiempo real que requieran un uso intensivo de datos y que funcione a través de dispositivos distribuidos.
      </para>
    </blockquote>
    <para>
      Esta nueva plataforma surgió en el año 2009 por Ryan Dahl, y es patrocinada por la empresa Joyent, y su creación se debió a la necesidad de crear un sistema que pudiera trabajar correctamente con sitios web que aceptaran peticiones push para el intercambio de datos, por lo que la idea de esta tecnología era especialmente interesante para el proyecto del servidor de notificaciones.
    </para>
    <para>
      Está compuesta de diferentes paquetes independientes, que son:
    </para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>Motor JavaScript V8 de Google Chrome</title>
          <para>
            Un intérprete creado ad-hoc para Google Chrome, que revolucionó a la competencia por ser el más rápido y usar unas ideas muy novedosas e inteligentes. Genera código máquina para varias plataformas, como 32-bits, 64-bits, ARM o MIPS antes de ejecutar el código, en vez de directamente interpretarlo como hacían otros motores JavaScript. Además, utiliza una serie de técnicas antes de ejecutar que permiten optimizar (en varios pasos) y cachear resultados de partes del código que se usan mucho, como bucles o algunas funciones.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>La capa de abstracción libUV</title>
          <para>
            Node.js se basó en la librería <code>libev</code> de abstracción de plataforma que estaba solamente disponible para Linux. Una vez que el desarrollo continuó y fue necesario utilizar otras plataformas, como Windows, se decidió crear <code>libUV</code>, que no es más que la evolución de <code>libev</code> para soportar otras plataformas y dar un API estándar para los desarrolladores de forma transparente al sistema que lo está ejecutando.
          </para>
        </formalpara>
        <para>
          libUV contiene la mayoría de las características que luego definen a Node.js. Así pues, se implementan sockets TCP no bloqueantes, tuberías, el protocolo UDP, temporizadores, creación de procesos hijos e hilos, paso de mensajes vía IPC y sockets, varias funciones asíncronas como DNS o acceso a ficheros del disco…
        </para>
        <para>
            Así pues, livuv obliga a un estilo de programación asíncrono y basado en eventos, y su trabajo principal es el de proveer un bucle de eventos y notificaciones basadas en callbacks para operaciones de entrada y salida y otras actividades.
        </para>
      </listitem>
      <listitem>
        <formalpara>
          <title>Núcleo</title>
          <para>
            Escrito principalmente en JavaScript haciendo uso de las API e interfaces que provee V8 y otros módulos para un trabajo comunitario, es el código principal que después, mediante otras APIs se expone al desarrollador que va a utilizar Node.js.
          </para>
        </formalpara>
        <para>
          Así pues, es posible encontrar módulos como el de criptografía<footnote><para>https://github.com/joyent/node/blob/master/src/node_crypto.cc</para></footnote> (<code>crypto</code>) escritos enteramente en C, haciendo uso de las extensiones de V8, mientras que por ejemplo el que provee la interfaz para el manejo de sistemas de ficheros<footnote><para>https://github.com/joyent/node/blob/master/lib/fs.js</para></footnote> (<code>fs</code>) está enteramente escrito en JavaScript, y su sintaxis es más fácil de entender y leer.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Para su diseño se tomó ideas prestadas de otros sistemas similares, como es Twisted para Python, libevent para C o EventMachine par Ruby. La mayoría de los programas en JavaScript se ejecutan en el contexto del navegador, puesto que siempre han sido los mayores exponenentes y consumidores de este lenguaje, sin embargo, Node.js es ejecutado en la parte del servidor, e incluso puede ser usado como lenguaje de scripting (sustituyendo incluso a Bash o Python) y posee un REPL, una consola interactiva.
    </para>
    <formalpara>
      <title>Usuarios</title>
      <para>
        Actualmente Node.js, a pesar de ser una tecnología muy reciente y joven, está siendo usada por muchas grandes empresas de Internet para escalar sus sistemas. El hecho de que Yahoo! haya empezado a migrar algunos de sus sistemas desde PHP hacia Node.js, implementando diferenes frameworks y módulos mientras hacían la transición, hace pensar que el recorrido de esta plataforma es muy amplio y con muchas empresas grandes detrás interesadas en que siga siendo funcional, agregue más módulos y características y que sea líder en el mercado de los desarrollos de servicios de backend. Además, Microsoft, LinkedIn (para su aplicación móvil) o incluso Walmart también han decidido cambiar algunos de sus sistemas para hacer uso de Node.js.
      </para>
    </formalpara>
    <section>
      <title>Para qué se usa</title>
        <para>
          Node.js se utiliza en la parte del backend como la programación lógica del servidor de notificaciones. Esto quiere decir que es el que controla todo lo que está ocurriendo en el servicio, expone las APIs de terceros, mantiene las conexiones abiertas, hace intercambio de datos, guarda en la base de datos, monitoriza los mensajes por si hay que borrarles y un sin fín más de funcionalidades.
        </para>
        <para>
          Así pues, es el componente principal del servicio, el que está en continuo contacto con el mensaje enviado, desde la entrada, incluyendo la verificación, hasta la entrega a los diferentes terminales a los que iba dirigido. Es el maestro de ceremonias que hace que todo funcione correctamente.
        </para>
    </section>
    <section>
      <title>Por qué se ha elegido</title>
      <para>
        Hay multitud de tecnologías para programar servicios web, pasando por cientos de diferentes lenguajes de programación que proveen miles de frameworks diferentes entre los que elegir. Sin embargo, una tecnología robusta, sencilla, con mucha comunidad detrás para buscar cualquier duda y tener un montón de módulos ha hecho que el proyecto se decantara por Node.js por las siguientes razones:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Es asíncrono y basado en eventos, lo que permite mucha más granularidad y no bloquear la ejecución. Además, no se tienen que lanzar hilos por cada petición (o varias), si no que está todo en un bucle de eventos al que se van añadiendo acciones.
          </para>
        </listitem>
        <listitem>
          <para>
            Es JavaScript, y está alineado con la tecnología del proyecto que lo engloba, que es FirefoxOS.
          </para>
        </listitem>
        <listitem>
          <para>
            Es muy rápido de programar y se pueden hacer pruebas de concepto de forma rápida, además, que sea JavaScript ayuda a detectar de forma más fácil los errores, y que el tiempo desde hacer un cambio hasta verlo reflejado sea mínimo, sin tener que esperar a grandes tiempos de compilación.
          </para>
        </listitem>
        <listitem>
          <para>
            Despliegue muy sencillo y con multitud de opciones, ya que permite elegir si se quiere correr detrás de un balanceador de carga (como HAProxy), directamente conectado a la red y que sea Node.js el que responda…
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Así pues, aunque hay otras elecciones posibles, como podría ser PHP, o incluso Python con pyev<footnote><para>https://code.google.com/p/pyev/</para></footnote>, el que se creyó que tendría menos uso de CPU y memoria y tendría más posibilidades de ser "hackeado" por la comunidad, fue Node.js.
      </para>
    </section>
  </section>

  <section>
    <title>RabbitMQ</title>
    <para>
      RabbitMQ es una plataforma de mensajería para aplicaciones, fácil de usar, que funciona en la mayoría de los sistemas operativos, de código abierto y con multitud de wrappers para diferentes lenguajes de programación, como Node.JS, C++, Java, Python…
    </para>
    <para>
      Una plataforma de mensajería permite a las aplicaciones conectarse y escalar de forma sencilla y rápida. Las aplicaciones pueden conectarse con otras aplicaciones, o bien diferentes componentes pueden ser independientes y constituir entre todos una gran aplicación o incluso poder enviar o recibir datos. La mensajería es asíncrona, por lo que se desacoplan las aplicaciones y se basa en eventos (de recepción, de envío).
    </para>
    <para>
      Algunas de las grandes características de RabbitMQ son:
    </para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>Confiabilidad</title>
          <para>
            RabbitMQ tiene una serie de funcionalidades que hace que la entrega de los mensajes pueda ser confiable, mediante la persistencia de mensajes (el mensaje no se guarda sólo en RAM, si no también en disco, recuperable en caso de que haya un error en el sistema), aceptaciones de entrega (puede ser automático o manual, por ejemplo, se quiere decir que un mensaje está recibido cuando se ha procesado correctamente), confirmación de publicación (si ha habido fallos al enviar mensajes a las colas) y alta escalabilidad.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Enrutado flexible</title>
          <para>
            Los mensajes son enrutados a través de intercambios antes de llegar a las colas, y RabbitMQ provee varias técnicas de enrutado, como hacer round-robin, el típico publicador-suscriptor o incluso se pueden mezclar técnicas simples con complejas para poder realizar cualquier enrutado imaginable.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Clustering</title>
          <para>
            Se pueden conectar varias instancias de RabbitMQ en una red local, haciendo un único y simple servidor.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Federación</title>
          <para>
            Es similar al modo cluster pero con mayor toleracia a fallos, usando redes que son más propensas a fallos, como en una red WAN, por ejemplo, teniendo las instancias en diferentes centros de datos distribuidos por el mundo.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Colas con alta disponibilidad</title>
          <para>
            Las colas pueden crearse en modo espejo en varias máquinas en un mismo cluster, por lo que si una máquina falla, la cola estará replicada en otra, y el fallo será transparente para los programas que usen este sistema de mensajería. Además, automáticamente se comprobará y se intentará unir de nuevo los nodos caídos.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Clientes múltiples</title>
          <para>
            Como se ha comentado más arriba, RabbitMQ ofrece muchos clientes para lenguajes de programación populares, ya sea para desarrollos de backend, como C++, Node.js, Python, Ruby o incluso Erlang, como para clientes frontend, como JavaScript en el navegador.
          </para>
        </formalpara>
      </listitem>
    </itemizedlist>
    <section>
      <title>Para qué se usa</title>
      <para>
        El uso principal en el servidor de notificaciones es la de pasar mensajes entre los diferentes actores que están en ejecución, de forma desacoplada y funcionando de forma independiente, esperando a eventos que desencadenen una reacción dependiendo de qué contengan y qué haya que realizar según el mensaje.
      </para>
      <para>
        El uso más simple que se da es el de algunas intancias creando contenido, que son los que publican y envían los mensajes a las colas, y otros que son los consumidores, los que reciben los mensajes y realizan con ellos diferentes tareas. Así pues, los suscriptores están apuntados a determinadas colas o tópicos, esperando a que lleguen mensajes que alguien les mete por el otro extremo. Es el caso de la cola <code>newMessages</code>, la cual es escrita por el servidor que provee la interfaz a los servidores de terceros, llamado Applicacion Server (<code>AS</code>), metiendo, bien los mensajes completos (cuando su tiempo de vida sea 0), o bien el identificador que él ha creado y ha guardado en la base de datos, para que el consumidor lo lea, y entienda que tiene que entregar los mensajes dependiendo de algunos parámetros que se pasan en dicho mensaje en la cola.
      </para>
    </section>
    <section>
      <title>Por qué se ha elegido</title>
      <para>
        En un primer momento el software de mensajería utilizado era ActiveMQ<footnote><para>http://activemq.apache.org/</para></footnote> ya que en el plan tecnológico se prefería el uso de esta tecnología, sin especificar las razones.
      </para>
      <para>
        Sin embargo, dado el uso que se estaba dando en el servidor de notificaciones, en el cual no era requerido que hubiera una persistencia de datos, que era uno de los puntos flojos de ActiveMQ, se empezó a usar el protocolo STOMP<footnote><para>http://stomp.github.com/</para></footnote>, que es el predeterminado de ActiveMQ.
      </para>
      <para>
        El problema surgió cuando hubo que probar el despliegue, añadiendo pruebas de alta disponibilidad, tolerancia a fallos y durabilidad en el tiempo, momento en el que se descartó ActiveMQ debido a que era muy débil en cuando alguno de sus nodos fallaran, así que como el cluster no era como tal, si no que era solamente maestro-esclavo, lo que hacía que la escalabilidad fuera muy mala.
      </para>
      <para>
        A partir de ese momento se buscaron otras soluciones de mensajería, viendo Apollo<footnote><para>http://activemq.apache.org/apollo/</para></footnote>, que es una nueva implementación de ActiveMQ basada en eventos y mucho más eficaz que su hermano mayor, ZeroMQ<footnote><para>http://www.zeromq.org/</para></footnote>, descartada por su gran curva de aprendizaje y su API a muy bajo nivel, y al final RabbitMQ, con el cual se hicieron más pruebas de carga, se decidió que sería la fundación final para los problemas de mensajería que se habían presentado, obligando a cambiar el protocolo de intercambio de datos, de STOMP a AMQP<footnote><para>http://www.amqp.org/</para></footnote>, nativo de RabbitMQ y estandarizado e implementado por la mayoría de los sistemas de colas (por lo que en un futuro se podría cambiar el software de mensajería sin que diera problemas el servidor de notificaciones).
      </para>
      <note>
        Hay que destacar que debido a los problemas que se encontraron en ActiveMQ el plan tecnológico está siendo revisado y es muy probable que en un futuro cercano se prefiera la opción de RabbitMQ en vez de ActiveMQ.
      </note>
    </section>
  </section>

  <section>
    <title>MongoDB</title>
    <para>
      Es una base de datos NoSQL escalable, orientada al almacén de documentos, con alto rendimiento, de código libre y escrita en C++. Es rápida y provee una flexibilidad que no dan las bases de datos relacionales, sobre todo en la manera como se guardan los datos, ya que no están ancladas a esquemas fijos que no pueden cambiarse.
    </para>
    <para>
      Creado por la empresa 10gen<footnote><para>http://www.10gen.com/</para></footnote> en octubre de 2007, utiliza JavaScript para las consultas (el API es accesible y se escribe como JavaScript), usando el motor de renderizado SpiderMonkey de Mozilla.
    </para>
    <para>
      La forma de guardado de los datos es en formato BSON, o Binary JSON, por lo que es totalmente compatible con JavaScript y no hay que hacer un post-procesado de la información para utilizarla de forma agradable en el backend, ya que es un tipo de dato nativo más para JavaScript, que es el lenguaje de programación de la parte de backend, con Node.js.
    </para>
    <para>
      Así pues, MongoDB es una base de datos muy rápida, muy flexible y con cientos de parámetros de configuración que hace que funcione desde una sola instancia hasta cientos de máquinas trabajando en paralelo en modo cluster, haciendo réplicas o muchas más maneras diferentes.
    </para>
    <para>
      Algunas de sus características son:
    </para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>Esquemas libres</title>
          <para>
            Que se guardan en un formato JSON, por lo que son fácilmente parseables por la mayoría de los lenguajes de programación. Además, permite realizar cambios al vuelo a los documentos, agregando o eliminando contenido sin tener problemas con si el esquema se repite o no, porque no hay tal.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Soporte completo de índices</title>
          <para>
            Aunque se guarden los documentos sin esquema, se pueden crear índices en aquellos campos que vayan a estar siempre. Por defecto, el índice genérico se realiza sobre el campo <code>_id</code> que es como la clave primaria para MongoDB. Sin embargo, se puede indexar por cualquier campo, incluso haciéndoles combinados para buscar de forma más rápida.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Replicación y alta disponibilidad</title>
          <para>
            Una de las razones por las que MongoDB es muy usado es porque tiene multitud de opciones para replicar los datos entre diferentes servidores, ya sea en redes locales LAN o redes más grandes, WAN.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Sharding</title>
          <para>
            Más allá de poder replicar la base de datos entre diferentes instancias, se puede crear la opción de dividir la base de datos dependiendo de los datos de entrada, y dirigir las escrituras hacia un lado u otro. Esto es interesante por ejemplo si se necesita cumplir alguna ley que obligue que en un servicio mundial, los datos de los usuarios de algún determinado país esté en un centro de datos en concreto.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Modificaciones atómicas</title>
          <para>
            Algunas bases de datos NoSQL rompen las convenciones de las bases de datos SQL usadas desde hace tiempo, como la atomicidad (operaciones que o bien se ejecutan en su totalidad, o no se ejecutan), que podría llevar a pérdida de información e incongruencias. Así pues, MongoDB posee un motor que le permite realizar este tipo de opciones sin coste alguno.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Map-reduce</title>
          <para>
            El famoso algoritmo map-reduce, cada vez más utilizado para realizar operaciones sobre grandes conjuntos de datos, es un ciudadano de primer nivel en MongoDB, lo que permite realizar operaciones de agregación y procesado de datos de forma sencilla.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>GridFS</title>
          <para>
            Permite guardar ficheros de cualquier tamaño en la base de datos, y recogerlos de forma sencilla, incluyendo replicación, sharding y todas las características que tiene MongoDB descritas más arriba.
          </para>
        </formalpara>
      </listitem>
    </itemizedlist>
    <section>
      <title>Para qué se usa</title>
        <para>
          Al ser una base de datos, se utiliza para guardar la información que envían los diferentes actores o instancias que están en ejecución en el servidor de notificaciones. Así por ejemplo, se guardan las notificaciones enviadas y correctas, los registros de los diferentes dispositivos con sus aplicaciones enlazadas y los posibles mensajes…
        </para>
    </section>
    <section>
      <title>Por qué se ha elegido</title>
      <para>
        Por proveer una flexibilidad mucho mayor que las bases de datos SQL tradicionales, y porque el formato de los mensajes, ya sean de los recibidos y los que se intercambian en las colas y de los datos entre las diferentes instancias tienen una característica en común: son JSON. Así pues, cualquier dato del sistema puede guardarse sin problemas en la base de datos, haciendo incluso de respaldo de los datos en caso de fallo del sistema.
      </para>
    </section>
  </section>

</chapter>

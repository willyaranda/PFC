<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="api"
      xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      version="5.0" xml:lang="es">

  <title>Application Program Interface, API</title>
  <para>
    El servidor de notificaciones tiene diferentes API que expone hacia los elementos que hay en la arquitectura y que hacen que los mensajes se entreguen a los destinatarios correctos. En un primer momento, y para mantener la compatibilidad con <link xlink:href="http://dvcs.w3.org/hg/push/raw-file/default/index.html">el estándar</link> que estaba proponiendo el W3C, se mantiene por compatibilidad hacia atrás, pero sin embargo, se sobreescriben algunos métodos para introducir mejoras de seguridad.
  </para>
  <para>
    Para entender este capítulo, es necesario presentar a los diferentes actores que hacen aparición:
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>Aplicación web (WebApp: WA)</title>
          <para>
            La aplicación del usuario que es ejecutada en el dispositivo.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Agente de usuario (User-Agent: UA)</title>
          <para>
            Como el proyecto se inició bajo el paraguas de Firefox OS, cuyo motor de renderizado de páginas web, equivalente a aplicaciones web es conocido como el Agente de usuario, que en nuestro caso es Gecko, el motor de Mozilla.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Servidor de notificaciones (Notification Server: NS)</title>
          <para>
            Es la infraestructura centralizada del servidor de notificaciones. Cualquiera puede desplegar una nueva instancia debido a que está <link xlink:href="https://github.com/telefonicaid/notification_server">liberado como código abierto</link>.
            Como el proyecto se inició bajo el paraguas de Firefox OS, cuyo motor de renderizado de páginas web, equivalente a aplicaciones web es conocido como el Agente de usuario, que en nuestro caso es Gecko, el motor de Mozilla.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Servidor de aplicaciones (Application Server: AS)</title>
          <para>
            Es la parte servidora de la WA. Normalmente se podría definir como la presencia en internet de la WA, que es la que recibe las URLs a las que tiene que hacer push y la que los realiza.
          </para>
        </formalpara>
      </listitem>
    </itemizedlist>
  </para>
  <para>
    <imagedata fileref="../resources/actors_and_channels.png" align="center" width="5in" />
  </para>

  <xi:include href="wa_ua.xml" />
  <xi:include href="ua_ns.xml" />
  <xi:include href="as_ns.xml" />

  <section xml:id="api_wa_as">
    <title>API entre WA y AS</title>
    <para>
      Este es el API que es independiente del protocolo de push propuesto, por lo que está fuera del alcance de este proyecto.
    </para>
    <para>
      Sin embargo, a través de este API la publicURL recibida por la aplicación a través del API entre la WA y el UA, debería ser mandada al servidor de terceros.
    </para>
    <formalpara>
      <title>Recomendaciones</title>
      <para>
        Sin embargo, hay una serie de pautas que deberían seguir los desarrolladores para pasar la información de una forma segura a través de la red.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Usar un canal seguro de envío de datos, como puede ser una conexión SSL con su servidor.
          </para>
        </listitem>
        <listitem>
          <para>
            Cifrar el contenido de la URL con algún algoritmo que permita descifrarlo en la parte servidora.
          </para>
        </listitem>
        <listitem>
          <para>
            Por supuesto, asociar algún número que no permita saber a quién corresponde la URL enviada con qué usuario para un atacante externo, pero que el servicio pueda identificarlo de forma unívoca.
          </para>
        </listitem>
      </itemizedlist>
    </formalpara>
  </section>

  <xi:include href="tokens.xml" />

  <section>
    <title>WakeUp</title>
    <para>
      When the handset is inside a mobile operator network, we can close the
      websocket to reduce battery comsuption and also network resources.
    </para>
    <para>
      So, when the NS has messages to the WA installed on a concrete UA it will
      send a UDP Datagram to the handset.
    </para>
    <para>
      When the mobile receives this datagram, it SHALL connect to the websocket
      interfaces in order to pull all pending messages.
    </para>
  </section>
</chapter>

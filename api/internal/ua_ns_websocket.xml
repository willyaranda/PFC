<?xml version="1.0" encoding="utf-8"?>
<section xml:id="api_internal_ua_ns_websocket"
      xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      version="5.0" xml:lang="es">

  <title>Interfaz WebSocket</title>
  <para>
    API WebSockets: Este es el API bidireccional para el intercambio de datos, registros y notificaciones en algunos casos. Es el más complejo de todos ya que están involucrados muchos mensajes diferentes, pero todos son correctamente formados como JSON.
  </para>
  <para>
    En primer lugar, es necesario abrir una conexión WebSockets con el servidor de notificaciones (en concreto con la instancia <code>NS_UA_WS</code>) para poder empezar a intercambiar datos.
  </para>
  <section>
    <title>Conexión WebSocket</title>
    <para>
      Así pues, hay que utilizar el recurso necesario para iniciar la conexión, del estilo de <code>wss://push.telefonica.com</code>, usando el protocolo <code>push-notification</code>.
    </para>
  </section>

  <note>
    A partir de este momento, los siguientes métodos y comunicaciones se realizan por el canal WebSocket que se ha abierto en la sección anterior.
  </note>

  <section>
    <title>Registro de UA</title>
    <para>
      Es el primer paso que hay que realizar para empezar a recibir notificaciones. Este paso significa el registro del dispositivo en el servidor de notificaciones, y la manera de recibirlas. Se realiza enviando un mensaje al servidor por la conexión WebSocket de la manera:
    </para>
    <screen>
      <![CDATA[{
        messageType: "registerUA",
        data: {
          uatoken: "<a valid UAToken>",
          interface: {
            ip: "<current device IP address>",
            port: "<TCP or UDP port to wake up>"
          },
          mobilenetwork: {
            mcc: "<Mobile Country Code>",
            mnc: "<Mobile Network Code>"
          }
        }
      }]]>
    </screen>
    <para>
      Donde los diferentes atributos tienen que ser:
    </para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>messageType</title>
          <para>
            Tiene que ser siempre <code>registerUA</code>.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>data</title>
          <para>
            Otros datos, compuestos por uatoken, interface y mobilenetwork.
          </para>
        </formalpara>
        <itemizedlist>
          <listitem>
            <formalpara>
              <title>uatoken</title>
              <para>
                Es el token de dispositivo conseguido en las secciones anteriores.
              </para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>interface</title>
              <para>
                Contiene la IP y puerto en el que el dispositivo puede ser despertado. Por ahora, sólo se permite la escucha en puertos TCP o UDP.
              </para>
            </formalpara>
            <itemizedlist>
              <listitem>
                <formalpara>
                  <title>ip</title>
                  <para>
                    Dirección del dispositivo, ya sea con la IP privada o pública. En el caso de que sea pública, no hace falta que se rellene el dato de <code>mobilenetwork</code> y en el caso de privada, sí es necesario, puesto que se usará un proxy intermedio colocado dentro de la red móvil para poder encontrarle directamente.
                  </para>
                </formalpara>
              </listitem>
              <listitem>
                <formalpara>
                  <title>port</title>
                  <para>
                    Puerto de escucha, puede ser TCP o UDP. No necesitará saber qué le llega, si no simplemente que algo ha llegado ahí.
                  </para>
                </formalpara>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <formalpara>
              <title>mobilenetwork</title>
              <para>
                Indica los dos valores necesarios para identificar una red móvil correctamente, <code>mcc</code> y <code>mnc</code>. Las listas completas pueden consultarse en Internet<footnote><para>http://en.wikipedia.org/wiki/Mobile_country_code</para></footnote>
              </para>
            </formalpara>
            <itemizedlist>
              <listitem>
                <formalpara>
                  <title>mcc</title>
                  <para>
                    Mobile Country Code.
                  </para>
                </formalpara>
              </listitem>
              <listitem>
                <formalpara>
                  <title>mnc</title>
                  <para>
                    Mobile Network Code.
                  </para>
                </formalpara>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
    <para>
      Así pues, la respuesta del registro puede ser válida o no.
    </para>
    <note>
      Hay que notar que las respuestas son asíncronas, y el envío de un mensaje de tipo <code>registerUA</code> no significa que su mensaje de respuesta sea el siguiente que llegue, por lo que hay que tratar cada mensaje por separado sin esperar una respuesta instantánea.
    </note>
    <para>
      En el caso de una respuesta exitosa, se recibirá algo similar a:
    </para>
    <screen>
      <![CDATA[{
        "messageType": "registerUA",
        "status": "REGISTERED",
        "pushMode": "WS",
        "WATokens": [],
        "messages": []
      }]]>
    </screen>
    <para>
      Donde se pueden encontrar varios atributos diferentes, los cuales son:
    </para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>messageType</title>
          <para>
            Que tiene que ser igual a <code>registerUA</code>, ya que es la respuesta al tipo de mensaje enviado en un inicio.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>status</title>
          <para>
            Si el valor es <code>REGISTERED</code>, es que el registro ha sido correcto.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>pushMode</title>
          <para>
            Indica cuál es el modo en que las notificaciones van a llegar al dispositivo. Hay varios modos, los cuales pueden ser
          </para>
        </formalpara>
        <itemizedlist>
          <listitem>
            <formalpara>
              <title>WS</title>
              <para>
                WebSocket. La conexión debe mantenerse abierta para poder recibir las notificaciones.
              </para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>UDP</title>
              <para>
                La conexión puede ser cerrada, ya que el dispositivo va a ser informado de que tiene nuevas notificaciones usando el canal UDP y el puerto abierto en el dispositivo. Últil en redes móviles.
              </para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>wapPush</title>
              <para>
                Utilizará WAP Push para informar al dispositivo de que hay nuevas notificaciones. No implementado en la primera versión
              </para>
            </formalpara>
          </listitem>
        </itemizedlist>
        <note>
          No están contempladas todas las posibilidades, ya que se puede añadir más en el futuro, dependiendo de los dispositivos que estén funcionando.
        </note>
      </listitem>
      <listitem>
        <formalpara>
          <title>WATokens</title>
          <para>
            Array que indica todas las aplicaciones que están registradas en el dispositivo. Se mandan las URLs completas, por lo que se puede comprobar si falta alguna. En el caso de que el dispositivo tenga más de las recibidas, puede re-registrar la aplicación determinada o bien eliminarla, según el caso. Si no ha recibido una aplicación que debería estar registrada, simplemente deberá registrarla.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>messages</title>
          <para>
            Array con las diferentes notificaciones que están pendientes de recibir por el dispositivo. Por cada una de ellas, y si el procesado es correcto, se debe enviar un mensaje de confirmación, o <code>ACK</code> para indicar que se ha recibido correctamente y no enviar duplicados en un futuro.
          </para>
        </formalpara>
      </listitem>
    </itemizedlist>
    <para>
      En el caso de una respuesta incorrecta, la respuesta será<footnote><para>https://github.com/telefonicaid/notification_server/blob/develop/src/common/constants.js#L39</para></footnote>
    </para>
    <screen>
      <![CDATA[{
        "messageType": "registerUA",
        "status": "ERROR",
        "reason": "<razón>"
      }]]>
    </screen>
    <para>
      Donde la razón <code>&lt;razón&gt;</code> puede ser:
    </para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>Data received is not a valid JSON package</title>
          <para>
            El mensaje enviado no es válido.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>UAtoken not valid for this server. Get a new one</title>
          <para>
            El token no es válido para el servidor actual, lo que quiere decir que se rechazará hasta que no se consiga uno nuevo.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Failed registering UAtoken</title>
          <para>
            Hubo un fallo interno en el servidor al registrar el dispositivo.
          </para>
        </formalpara>
      </listitem>
    </itemizedlist>
    <note>
      Esta función de registro tiene que realizarse cada vez que cambie la conexión móvil o WiFi del dispositivo, para actualizar la información en el servidor.
    </note>
  </section>

  <note>
    A partir de este momento, los siguientes métodos y comunicaciones necesitan tener una conexión autorizada, esto es, que haya registrado anteriormente un dispositivo mediante el método <code>registerUA</code>
  </note>

  <section>
    <title>Registro de WA</title>
    <para>
      Esta función es la usada para el registro de aplicaciones a partir de una clave pública y un token de aplicación. Es la capa inferior de la función <code>requestRemotePermission</code> del objeto <code>navigator.push</code> expuesto para los desarrolladores de aplicaciones.
    </para>
    <para>
      El formato es como sigue:
    </para>
    <screen>
      <![CDATA[{
        "data":{
          "watoken": "hola",
          "pbkbase64": "hola"
        },
        "messageType":"registerWA"
      }]]>
    </screen>
    <para>
      Donde los diferentes atributos se definen como:
    </para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>data</title>
          <para>
            Contiene los datos necesarios para realizar el registro, los cuales son:
          </para>
        </formalpara>
        <itemizedlist>
          <listitem>
            <formalpara>
              <title>watoken</title>
              <para>
                Es el token de aplicación que hay que registrar.
              </para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>pbkbase64</title>
              <para>
                Es la clave pública, codificada en formato Base64 para evitar problemas con los saltos de línea u otro tipo de caracteres o símbolos extraños, que corresponde a la aplicación que ha solicitado el registro.
              </para>
            </formalpara>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <formalpara>
          <title>messageType</title>
          <para>
            Tiene que ser igual a la cadena <code>registerWA</code>.
          </para>
        </formalpara>
      </listitem>
    </itemizedlist>

    <para>
      Con la posible respuesta, por el mismo canal y de forma asíncrona que puede ser:
    </para>
    <screen>
      <![CDATA[{
        "watoken": "<watoken>",
        "messageType": "registerWA",
        "status": "REGISTERED",
        "url": "https://push.telefonica.com/notify/5819b005..."
      }]]>
    </screen>

    <para>
      Que se corresponden con los siguientes atributos:
    </para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>watoken</title>
          <para>
            Es el token que ha generado la respuesta actual. De nuevo, comentar que las respuestas son asíncronas, por lo que tiene que ir reflejado a qué petición inicial iba dirigida.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>messageType</title>
          <para>
            Tiene que ser igual al mensaje original, por lo tanto <code>registerWA</code>. Permite tratar al mensaje correctamente en el código.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>status</title>
          <para>
            Tiene que ser igual a la cadena <code>REGISTERED</code>. En caso contrario, o que venga el texto <code>ERROR</code>, el registro no ha sido correcto.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>url</title>
          <para>
            URL o recurso con la dirección única de notificación. Tiene que enviarse esta URL al objeto que ha originado la petición desde la aplicación.
          </para>
        </formalpara>
      </listitem>
    </itemizedlist>
    <para>
      También hay unos códigos de error similares a los del método <code>registerUA</code> respondiendo con un mensaje del estilo:
    </para>
    <screen>
      <![CDATA[{
        "watoken": "<watoken>",
        "messageType": "registerWA",
        "status": "ERROR",
        "reason": "<razón>"
      }]]>
    </screen>
    <para>
      Con el atributo <code>reason</code> dando una explicación del error en forma humana, con un claro mensaje descriptivo y un atributo <code>watoken</code> indicando qué aplicación ha fallado.
    </para>
    <para>
      Una vez recibido un mensaje correcto de registro de WA, podemos estar seguros que las notificaciones que envíen los servidores de terceros eventualmente llegarán a la aplicación a la que se envía la notificación.
    </para>
  </section>

  <section>
    <title>Recepción de notificación</title>
    <para>
      Las notificaciones pueden venir por dos medios diferentes
    </para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>En respuesta a <code>registerUA</code></title>
          <para>
            Cuando un dispositivo se registra o actualiza sus datos, tiene que enviar un mensaje del tipo <code>registerUA</code>, el cual, si todo funciona correctamente, recibirá de forma asíncrona la respuesta, conteniendo un array de mensajes en el atributo <code>messages</code>.
          </para>
        </formalpara>
        <screen>
          <![CDATA[{
            "messageType": "registerUA",
            "status": "REGISTERED",
            "pushMode": "WS",
            "WATokens": [],
            "messages": []
          }]]>
        </screen>
      </listitem>
      <listitem>
        <formalpara>
          <title>Como mensaje independiente</title>
          <para>
            Sin embargo, si se está utilizando una conexión de WebSockets, las notificaciones llegan como mensajes independientes, de la manera siguiente:
          </para>
        </formalpara>
        <screen>
          <![CDATA[{
            "messageType": "notification",
            "id": 1234,
            "message": "Hola",
            "ttl": 2592000,
            "timestamp": "1359984038",
            "priority": 1,
            "messageId": "aacf9ca0-6ecd-11e2-815f-551df8e4ba6a",
            "url": "https://push.telefonica.com/notify/31387b27716acb88d336cda8858..."
          }]]>
        </screen>
        <para>
          Donde lo más importante son los dos últimos atributos:
        </para>
        <itemizedlist>
          <listitem>
            <formalpara>
              <title>messageId</title>
              <para>
                Es el identificador único que le ha dado el servidor de notificaciones a la notificación. Es el usado para mandar el acuse de recepción.
              </para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>url</title>
              <para>
                URL inicial a la que se envió la notificación, sirve para identificar en el User Agent (<code>UA</code>) la aplicación en concreto a la que va dirigida.
              </para>
            </formalpara>
          </listitem>
        </itemizedlist>
        <para>
          El UA que recibe este mensaje debe utilizar el atributo <code>url</code> para saber a qué aplicación en concreto va, y una vez encontrada. Debe eliminarse de la notificación entregada a la aplicación.
        </para>
        <para>
          El UA también debe usar el atributo <code>messageId</code> para enviar la confirmación de recepción, una vez esté recibido correctamente por la aplicación. Debe eliminarse de la notificación entregada a la aplicación.
        </para>
      </listitem>
    </itemizedlist>
    <note>
      Para no volver a recibir los mensajes duplicados, hay que enviar un acuse de recibo, explicado en la siguiente sección.
    </note>
  </section>

  <section>
    <title>Confirmación de recepción, o ACK</title>
    <para>
      Una vez recibidas notificaciones, ya sea a a través de los mensajes de regitro de User Agent (a través del mensaje <code>registerUA</code>) o mediante la conexión WebSocket, una notificación directa, hay que mandar un mensaje de recepción al servidor, por varios motivos:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Al aceptar el mensaje, éste se borra de la base de datos, en concreto de la colección de mensajes dirigidos para determinado usuario, por lo que si no se informa de su recepción, el mensaje seguirá enviándose hasta que pase el tiempo de vida (especificado en el atributo <code>ttl</code>) o se de-registre la aplicación.
        </para>
      </listitem>
      <listitem>
        <para>
          Los servicios que envíen la notificación, serán capaces de controlar si la notificación se ha entregado correctamente o con algún error a los diferentes dispositivos que la deberían recibir.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Así pues, el mensaje que hay que enviar a través de la conexión WebSocket para informar de la recepción de los mensajes es el siguiente:
    </para>
    <screen>
      <![CDATA[{
        messageType: 'ack',
        messageId: <msg.messageId>
      }]]>
    </screen>
    <para>
      Donde los diferentes atributos tienen que ser:
    </para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>messageType</title>
          <para>
            Tiene que ser igual a la cadena <code>ack</code>.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>messageId</title>
          <para>
            Tiene que ser igual al <code>messageId</code> que está contenido dentro del mensaje. No es el <code>id</code> que ha enviado el servidor de terceros, si no uno generado internamente para el guardado y búsqueda del mensaje en el servidor de notificaciones.
          </para>
        </formalpara>
      </listitem>
    </itemizedlist>
    <para>
      No hay ninguna respuesta a este mensaje y además tiene que enviarse uno por cada mensaje que haya que aceptar la recepción. Así pues, si en la respuesta a <code>registerUA</code> llega un array con 10 mensajes diferentes, hay que mandar 10 mensajes de recepción del estilo superior para que se borren de la base de datos.
    </para>
  </section>

  <section>
    <title>De-registro de WA</title>
    <para>
      De la misma manera que se puede registrar una aplicación, también puede de-registrarse para que el dispositivo no siga recibiendo notificaciones continuamente en los siguientes casos:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          El usuario ha desinstalado la aplicación, por lo que el gestor de aplicaciones, al eliminarla, también tiene que eliminar los permisos asociados y realizar las operaciones oportunas. En el caso de push, lo que se tiene que hacer es de-registrar la aplicación en local y en remoto, para que la URL no sea válida y pueda dejar de recibir notificaciones push.
        </para>
      </listitem>
      <listitem>
        <para>
          El usuario revoca el permiso en la aplicación de configuración, donde se le presenta una lista de aplicaciones que están utilizando el servicio de push.
        </para>
      </listitem>
      <listitem>
        <para>
          La aplicación pide la revocación programáticamente, porque no quiere seguir recibiendo nuevos mensajes push, o bien por algún cambio de usuario o de configuración que requiera que sea otra URL la de recepción push.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Entonces, el mensaje que se tiene que enviar es el siguiente:
    </para>
    <screen>
    <![CDATA[{
      "data": {
        "watoken": "<watoken>",
        "pbkbase64": "<pbkbase64>"
      },
      "messageType":"unregisterWA"
    }]]>
    </screen>
    <para>
      Donde los atributos que hay que enviar son los siguientes… XXX
    </para>
    <para>
      Y la respuesta, de nuevo asíncrona, es como sigue:
    </para>
    <screen>
    <![CDATA[{
      "url": "https://push.telefonica.com/notify/31387b27716acb88d336cda8858...",
      "messageType": "unregisterWA",
      "status": "UNREGISTERED"
    }]]>
    </screen>
    <para>
      Donde se indica, como en los mensajes anteriores, diferentes atributos:
    </para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>url</title>
          <para>
            Que se corresponde a la URL que ha sido de-registrada.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>messageType</title>
          <para>
            Tiene que ser igual a la cadena <code>unregisterWA</code> para especificar que es la respuesta a una petición similar anterior.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>status</title>
          <para>
            Si todo ha sido correcto, el atributo <code>status</code> contendrá una cadena igual a <code>UNREGISTERED</code>
          </para>
        </formalpara>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>De-registro de UA</title>
    <para>
      De la misma manera que hay un método de registro de UA y un método de de-registro de WA, hay un método para de-registrar un dispositivo.
    </para>
    <note>
      <emphasis>Peligro</emphasis>. Este método elimina todos los datos del dispositivo de la base de datos, invalidando cualquier URL y desechando cualquier notificación pendiente.
    </note>
    <para>
      El mensaje que hay que enviar, es simplemente:
    </para>
    <screen>
      <![CDATA[{
        "messageType": "unregisterUA"
      }]]>
    </screen>
    <para>
      El cual es el único método síncrono, ya que si el de-registro es correcto, la conexión WebSocket por la que se ha enviado, se cierra de forma consensuada (esto es, el cierre viene acompañado por el código <code>1000</code> de las constantes de cierre de WebSocket)<footnote><para>http://tools.ietf.org/html/rfc6455#section-7.4.1</para></footnote>.
    </para>
    <para>
      El mensaje de cierre, aunque sea nulo, podría ser en la consola JavaScript algo similar a:
    </para>
    <screen>
      <![CDATA[Closed connection to push.telefonica.com with code 1000 and reason [undefined]]]>
    </screen>
    <para>
      A partir de este momento, la conexión está cerrada, y el dispositivo no existe para el servidor de notificaciones. Para poder volver a registrarse, se tienen que repetir los pasos superiores.
    </para>
  </section>

  <section>
    <title>Pedir WA registradas</title>
    <para>
      Este es un método para poder mantener una sincronía y el mismo estado entre el servidor y el cliente. La lógica de qué hacer con los datos recibidos la tiene que tener el cliente, por ejemplo:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Si vienen más URLs de las que están en local, quizás haya que de-registrar alguna aplicación. Pero también puede ser que se haya perdido el registro local.
        </para>
      </listitem>
      <listitem>
        <para>
          Si vienen menos URLs de las que debería haber, habría que registrar de nuevo una aplicación, puesto que el servidor no sabe nada de ella y no podría recibir notificaciones push.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      La petición se realiza por el canal abierto, y el mensaje a enviar es el siguiente:
    </para>
    <screen>
      <![CDATA[{
        "messageType": "getRegisteredWA"
      }]]>
    </screen>
    <para>
      Con una posible respuesta como esta:
    </para>
    <screen>
      <![CDATA[{
        "WATokens": [
          "https://push.telefonica.com/notify/31387b27716acb88d336cda8858...",
          "https://push.telefonica.com/notify/739a6ecd89f3e113ef443accd34...",
          "https://push.telefonica.com/notify/835ea56dc561b3865bead53cb73..."
        ],
        "messageType": "getRegisteredWA"
      }]]>
    </screen>
    <para>
      Donde los atributos son los siguientes:
    </para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>WATokens</title>
          <para>
            Es un array con todas las URLs de aplicaciones registradas.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>messageType</title>
          <para>
            Tiene que ser igual a la cadena <code>getRegisteredWA</code> puesto que es la respuesta a la petición anterior.
          </para>
        </formalpara>
      </listitem>
    </itemizedlist>
  </section>
</section>

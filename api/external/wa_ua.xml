<?xml version="1.0" encoding="utf-8"?>
<section xml:id="api_external_wa_ua"
      xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      version="5.0" xml:lang="es">

  <title>Entre la aplicación web y el agente de usuario</title>
  <para>
    Este API, llamada <code>navigator.mozPush</code>, es la principal vía de comunicación entre las aplicaciones y el agente de usuario, o sistema operativo.
  </para>
  <note>
    <para>Este API está prefijada en la primera versión funcional con <code>moz</code> puesto que se ha implementado por primera vez en un dispositivo por parte del navegador Mozilla Firefox y es el que tienen establecido para estas funcionalidades experimentales.</para>
  </note>
  <para>
    Está basada en el estándar propuesto<footnote><para>http://dvcs.w3.org/hg/push/raw-file/default/index.html</para></footnote> por el W3C, pero sin embargo tiene una serie de adiciones para añadir seguridad y eliminar la redundancia de alguno de sus métodos.
  </para>
  <para>
    Con esta API, la aplicación es capaz de realizar dos funciones principales:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        Requerir permiso remoto para poder recibir una URI y comprobar si ya se tiene permiso, mediante la función <code>requestRemotePermission</code>.
      </para>
    </listitem>
    <listitem>
      <para>
        Revocar el recurso URI, para eliminar el registro de determinada aplicación, y no recibir más mensajes push, usando <code>revokeRemotePermission</code>
      </para>
    </listitem>
  </itemizedlist>
  <para>
    Así pues, la interfaz que define a <code>PushManager</code> (que es el contenedor que se expone a las aplicaciones), quedará de la forma siguiente:
  </para>
  <figure>
    <title>Interfaz <code>PushManager</code></title>
    <programlisting language="JavaScript">
<![CDATA[interface PushManager {
  PushService requestRemotePermission (DOMString waToken,
                                       DOMString publicKey,
                                       optional DOMString algorithm);
  PushService revokeRemotePermission ();
};]]>
    </programlisting>
  </figure>

  <section>
    <title>Método requestRemotePermission</title>
    <para>
      Este método es el que tienen que llamar las aplicaciones para pedir permiso remoto para poder recibir las notificaciones. Así pues, es una petición que tiene dos resultados posibles, <code>onsucess</code> y <code>onerror</code>, dependiendo de si el resultado es satisfactorio o no. Como se he especificado más arriba, la signatura de la función es:
    </para>
    <figure>
      <title>Función <code>requestRemotePermission</code></title>
      <programlisting language="JavaScript">
<![CDATA[requestRemotePermission (DOMString waToken,
                         DOMString publicKey,
                         optional DOMString algorithm);]]>
      </programlisting>
    </figure>
    <para>
      Donde se ven los diferentes parámetros necesarios para poder operar correctamente, como son:
    </para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title><code>waToken</code></title>
          <para>
            Es el token único que tiene que generar la aplicación (ya sea en el servidor, o bien totalmente aleatorio) para identificarse de forma única junto a la clave pública en el servidor de notificaciones, que serán usados para crear una URL unívoca que servirá para mandar las notificaciones solamente a aquellas aplicaciones que hayan registrado ese par.
          </para>
        </formalpara>
        <note>
          <para>El desarrollador tiene la opción de hacer su <code>waToken</code> público y compartido, por lo que será usado para hacer broadcast de las notificaciones, o bien mantenerlo como un secreto para que sólo la instancia que contenga este token único sea la que reciba las notificaciones.</para>
        </note>
      </listitem>
      <listitem>
        <formalpara>
          <title><code>publicKey</code></title>
          <para>
            Es una llave pública que la aplicación tiene que tener guardada en el momento de su instalación (o bien transferida de forma segura por el servidor de terceros (<code>AS</code>: Application Server)) para poder ser usada en la comprobación de la firma de los mensajes por parte del componente <code>NS_AS</code> (Notification Server - Aplication Server) del servidor de notificaciones, para prevenir que en el sistema entren notificaciones y mensajes inválidos o maliciosos. Esta llave debe ser transmitida en Base64.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title><code>algorithm</code></title>
          <para>
            <optional>Opcional</optional>. Este parámetro indica el método de firmado usado por el parámetro <code>publicKey</code> para la comprobación de las notificaciones. El algoritmo predeterminado es el <code>RSA-SHA256</code>.
          </para>
        </formalpara>
      </listitem>
    </itemizedlist>

    <para>
      Además, los diferentes métodos serán llamados una vez se ejecute correctamente o con algún error la función, bien por un problema en la red, o bien por un problema en el servidor:
    </para>

    <itemizedlist>
      <listitem>
        <formalpara>
          <title><code>onsuccess</code></title>
          <para>
            Este método es invocado cuando la petición <code>requestRemotePermission</code> se ejecuta de forma satisfactoria. Lo que realmente hace es recoger un evento <code>success</code> que lanza el objeto <code>requestRemotePermission</code>. Así entonces, este evento tiene, como en la mayoría de los creados por objetos DOM en los navegadores, un atributo <code>detail</code> que contiene el mensaje satisfactorio:
          </para>
        </formalpara>
        <itemizedlist>
          <listitem>
            <formalpara>
              <title><code>event.detail.url</code></title>
              <para>
                URL recibida desde el servidor de notificaciones y que será, probablemente, única para la instancia actual de la aplicación. Esta URL debe ser notificada por el medio más conveniente por la aplicación hacia su servidor de terceros, ya que será la usada para poder recibir notificaciones push.
              </para>
            </formalpara>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <formalpara>
          <title><code>onerror</code></title>
          <para>
            Método invocado cuando sucede algo no esperado en la respuesta del objeto creado por <code>requestRemotePermission</code>. Puede ser debido por múltiples factores, como fallo en la red (no disponible, o que se haya caído en medio de la tranmisión), fallo en el servidor de notificaciones (mensaje de error por no disponibilidad), o incluso por que el registro falle por tener un token incorrecto o duplicado.
          </para>
        </formalpara>
        <para>
          El evento que se captura también tiene el mensaje de error, que si bien no es informativo para las aplicaciones (debería ser completamente transparente), se muestra en:
        </para>
        <itemizedlist>
            <listitem>
              <formalpara>
                <title><code>event.error</code></title>
                <para>
                  Mensaje de error. Bien generado por el propio sistema operativo o <code>UA</code> (User Agent) o bien el que es enviado por el servidor de notificaciones.
                </para>
              </formalpara>
            </listitem>
          </itemizedlist>
      </listitem>
    </itemizedlist>

    <example>
      <title>Pedir permiso remoto y recibir URL</title>
      <programlisting>
<![CDATA[var watoken = 'mySecretWaToken';
var pbk = '…';

var push = navigator.mozPush;
var req = push.requestRemotePermission(watoken,
                                       encodeBase64(pbk));

req.onsuccess = function(event) {
  console.log('Yay! URL is: ' + event.detail.url);
};

req.onerror = function(event) {
  console.log('Oops!! Error is: ' + event.error);
};]]>
      </programlisting>
    </example>

    <para>
      Además, hay otro método, función o callback, llamado <code>onmessage</code>, que es ejecutado cada vez que la aplicación recibe un mensaje de notificación. Sólo es ejecutado cuando ha habido un <code>onsucess</code> previo, y no se ha producido ningún <code>onerror</code>.
    </para>

    <itemizedlist>
      <listitem>
        <formalpara>
          <title><code>onmessage</code></title>
          <para>
            Función que se llama una vez llega una notificación desde el sistema operativo. Hay que notar, que para que funcione esta opción, el objeto creado por <code>requestRemotePermission</code> tiene que seguir vivo y no haber sido borrado por el recolector de basura de JavaScript, por lo que se puede interpretar con que la aplicación está abierta, o bien se crea un objeto con una referencia fuerte, que significa que si la aplicación se cierra, el objeto sigue abierto y puede ser notificado.
          </para>
        </formalpara>
        <itemizedlist>
          <listitem>
            <formalpara>
              <title><code>event.detail.message</code></title>
              <para>
                Mensaje completo. Es el <code>payload</code> que el servidor de las aplicaciones quería mandar desde un primer momento.
              </para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title><code>event.detail.url</code></title>
              <para>
                 <optional>Opcional</optional> URL a la que la notificación iba dirigida. Añadido por la posibilidad de que en un futuro las aplicaciones puedan pedir varias veces el permiso remoto, por lo cual recibirán diferentes URL a la que el servidor podría hacer push.
              </para>
            </formalpara>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
    <note>
      <para>
        En la primera versión implementada en FirefoxOS, se utiliza el futuro estándar <code>setMessageHandler</code> del objeto <code>navigator</code> para poder ser despertado a pesar de que la aplicación esté cerrada.
      </para>
      <programlisting>
<![CDATA[navigator.mozSetMessageHandler("push-notification", function(msg) {
  alert("New Message with body: " + JSON.stringify(msg));
});]]>
      </programlisting>
    </note>
  </section>

  <section>
    <title>Método revokeRemotePermission</title>
    <figure>
      <title>Función <code>revokeRemotePermission</code></title>
      <programlisting language="JavaScript">
<![CDATA[revokeRemotePermission ();]]>
      </programlisting>
    </figure>
    <para>
      Este método realiza el paso contrario que el anterior, puesto que pide al servidor de notificaciones que se dejen de enviar notificaciones, esto es, que se quiere eliminar la URL o recurso dado en el paso anterior. Es un de-registro de URL. Puede servir en múltiples casos, como por ejemplo:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Si la aplicación decide eliminar las notificaciones push por otro sistema y quiere dejar todo el sistema limpio, haciendo olvidar y eliminar todos los datos anteriores.
        </para>
      </listitem>
      <listitem>
        <para>
          El usuario decide editar las preferencias de la aplicación desde la configuración global del sistema y desactiva la opción de notificaciones push para determinadas aplicaciones. El sistema puede decidir no mandar las notificaciones a la aplicación o bien de-registrarla del servidor.
        </para>
      </listitem>
      <listitem>
        <para>
          El servidor de terceros ha sido comprometido y las aplicaciones tienen que re-registrarse para usar la nueva clave pública (<code>PbK</code>), por lo que en primer lugar tienen que de-registrarse para evitar que futuras notificaciones de orígenes malignos puedan volver a llegar a la aplicación.
        </para>
      </listitem>
    </itemizedlist>

    <example>
      <title>Pedir revocación de permiso (revocar URL)</title>
      <programlisting>
<![CDATA[var push = navigator.mozPush;
var req = push.revokeRemotePermission();

req.onsuccess = function(event) {
  console.log('Unregister successful');
};

req.onerror = function(event) {
  console.log('Oops!! Error is: ' + event.error);
};]]>
      </programlisting>
    </example>
  </section>
</section>

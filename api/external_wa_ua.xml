<?xml version="1.0" encoding="utf-8"?>
<section xml:id="api_external_wa_ua"
      xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      version="5.0" xml:lang="es">

  <title>Entre la WA y UA</title>
  <para>
    Este API, llamada <code>navigator.mozPush</code>, es la principal vía de comunicación entre las aplicaciones y el agente de usuario, o sistema operativo.
  </para>
  <note>
    Este API está prefijada en la primera versión funcional con <code>moz</code> puesto que se ha implementado por primera vez en un dispositivo por parte del navegador Mozilla Firefox y es el que tienen establecido para estas funcionalidades experimentales.
  </note>
  <para>
    Está basada en el estándar propuesto<footnote><para>http://dvcs.w3.org/hg/push/raw-file/default/index.html</para></footnote> por el W3C, pero sin embargo tiene una serie de adiciones para añadir seguridad y eliminar la redundancia de alguno de sus métodos.
  </para>
  <para>
    Con esta API, la aplicación es capaz de realizar dos funciones principales:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        Requerir permiso remoto para poder recibir una URI y comprobar si ya se tiene permiso, mediante la función <code>requestRemotePermission</code>.
      </para>
    </listitem>
    <listitem>
      <para>
        Revocar el recurso URI, para eliminar el registro de determinada aplicación, y no recibir más mensajes push, usando <code>revokeRemotePermission</code>
      </para>
    </listitem>
  </itemizedlist>
  <para>
    Así pues, la interfaz que define a <code>PushManager</code> (que es el contenedor que se expone a las aplicaciones), quedará de la forma siguiente:
  </para>
  <figure>
      <title>Interfaz <code>PushManager</code></title>
      <programlisting language="JavaScript">
<![CDATA[
interface PushManager {
  PushService requestRemotePermission (DOMString appToken,
                                       optional DOMString publicKey,
                                       optional DOMString algorithm);
  PushService checkRemotePermission (DOMString appToken);
};]]>
      </programlisting>
    </figure>

  <section>
    <title>Método requestRemotePermission</title>
    <para>
      ddd
    </para>

    <example>
      <title>Pedir permiso remoto y recibir URL</title>
      <para>
      </para>
    </example>
  </section>

  <section>
    <title>Método revokeRemotePermission</title>

    <example>
      <title>Pedir revocación de permiso (revocar URL)</title>
      <para>
      </para>
    </example>
  </section>



  <para>
    This API (under the navigator.mozPush object) defines these methods:
    <itemizedlist>
      <listitem>
        <para>requestURL</para>
      </listitem>
      <listitem>
        <para>getCurrentURL</para>
      </listitem>
    </itemizedlist>
  </para>
  <section>
    <title>navigator.mozPush.requestURL</title>
    <para>
      This method allows the application to register it self into the
      notification server.
      <programlisting language="javascript">
      <![CDATA[
      navigator.mozPush.requestURL(watoken, pbk)
      ]]>
      </programlisting>
    </para>
    <para>
      This method should receive this two parameters:
      <itemizedlist>
        <listitem>
          <formalpara>
            <title>watoken</title>
            <para>The WA Token used to identify the user of the application.</para>
          </formalpara>
          <para>
            The application developer can decide to use the same WAToken for
            all his users or a group of them so the notification will act
            as a broadcast message
          </para>
          <para>
            It's very important to note that this token (mainly if used to
            identify one particular user) SHALL be a secret. It's recommended
            that this token will be generated by the server using a SHA hash
            based on the login details (as an identification cookie).
          </para>
          <para>
            If this parameter is not provided, a randomized one will be
            generated by the UA engine.
          </para>
        </listitem>
        <listitem>
          <formalpara>
            <title>pbk</title>
            <para>This parameter will contain a RSA Public key coded in BASE64.</para>
          </formalpara>
          <para>
            This public key will be used by the notification server to
            validate the received messages signature, so the private key
            will be used by the AS to sign the messages.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      It's under definition to send two parameters or only one which will be
      a JSON object:
      <programlisting language="javascript">
      <![CDATA[
      navigator.mozPush.requestURL({
        watoken: <watoken>,
        pbk: <Base64 codified public key>
      })
      ]]>
      </programlisting>
    </para>
    <para>
      Finally this method will response asynchronously with the URL to be
      sent to the AS in order to be able to send notifications.
    </para>
    <programlisting language="javascript">
      <![CDATA[
      var req = navigator.mozPush.requestURL(this.watoken, this.pbk);
      req.onsuccess = function(e) {
        alert("Received URL: " + req.result.url);
      };
      req.onerror = function(e) {
        alert("Error registering app");
      }
      ]]>
    </programlisting>
  </section>

  <section>
    <title>navigator.mozPush.getCurrentURL</title>
    <para>
      This method allows the application to recover a previously requested
      URL to the UA API, so it's not needed to ask for it to the
      notification server.
      <programlisting language="javascript">
      <![CDATA[
      navigator.mozPush.getCurrentURL()
      ]]>
      </programlisting>
    </para>
    <para>
      This methods will response asynchronously with the URL to be
      sent to the AS in order to be able to send notifications.
    </para>
    <programlisting language="javascript">
      <![CDATA[
      var req = navigator.mozPush.getCurrentURL();
      req.onsuccess = function(e) {
        alert("URL = " + req.result.url);
      };
      req.onerror = function(e) {
        alert("Error getting URL");
      }
      ]]>
    </programlisting>
  </section>

  <para>
    After register the application into the Notification Server, all received
    notification through the given URL will be delivered to all user agents
    which registered the pair (WAToken + PBK).
  </para>
  <para>
    Since the notifications will be received by the UA it's needed a way to
    notify each application. The current specification is using the new
    System Messages infrastructure defined in FirefoxOS.
  </para>
  <para>
    In this case, the application shall register to the "push-notification"
    event handlser:
    <programlisting language="javascript">
    <![CDATA[
    navigator.mozSetMessageHandler("push-notification", function(msg) {
      alert("New Message with body: " + JSON.stringify(msg));
    });
    ]]>
    </programlisting>
  </para>
  <para>
    The complete example:
    <programlisting language="javascript">
      <![CDATA[
      var req = navigator.mozPush.requestURL(this.watoken, this.pbk);
      req.onsuccess = function(e) {
        alert("Received URL: " + req.result.url);
        navigator.mozSetMessageHandler("push-notification", function(msg) {
          alert("New Message with body: " + JSON.stringify(msg));
        });
      };
      req.onerror = function(e) {
        alert("Error registering app");
      }
      ]]>
    </programlisting>
  </para>
</section>
